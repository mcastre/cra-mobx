{"ast":null,"code":"var _jsxFileName = \"/Users/martincastre/Desktop/martin-env/cra-mobx/src/App.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { inject, observer } from 'mobx-react';\n\nvar App = function App(_ref) {\n  var isLoading = _ref.isLoading,\n      errorMessage = _ref.errorMessage,\n      verifyAddress = _ref.verifyAddress,\n      setUserData = _ref.setUserData;\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7\n    },\n    __self: this\n  }, \"hello MobX\"), React.createElement(\"input\", {\n    type: \"text\",\n    onChange: function onChange(str) {\n      return setUserData(str);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    type: \"button\",\n    onClick: function onClick() {\n      return verifyAddress();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  }, \"Submit\"), isLoading ? React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  }, \"Loading...\") : null, errorMessage ? React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }, errorMessage) : null);\n};\n\nApp.propTypes = {\n  verifyAddress: PropTypes.func.isRequired,\n  setUserData: PropTypes.func.isRequired,\n  isLoading: PropTypes.bool.isRequired,\n  errorMessage: PropTypes.string.isRequired\n};\nexport default inject(function (_ref2) {\n  var store = _ref2.store;\n  var user = store.user,\n      ui = store.ui;\n  return {\n    verifyAddress: user.verifyAddress,\n    setUserData: user.setUserData,\n    isLoading: ui.uiState.isLoading,\n    errorMessage: ui.uiState.errorMessage\n  };\n})(observer(App));","map":{"version":3,"sources":["/Users/martincastre/Desktop/martin-env/cra-mobx/src/App.js"],"names":["React","PropTypes","inject","observer","App","isLoading","errorMessage","verifyAddress","setUserData","str","propTypes","func","isRequired","bool","string","store","user","ui","uiState"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,MAAT,EAAiBC,QAAjB,QAAiC,YAAjC;;AAEA,IAAMC,GAAG,GAAG,SAANA,GAAM;AAAA,MAAGC,SAAH,QAAGA,SAAH;AAAA,MAAcC,YAAd,QAAcA,YAAd;AAAA,MAA4BC,aAA5B,QAA4BA,aAA5B;AAAA,MAA2CC,WAA3C,QAA2CA,WAA3C;AAAA,SACV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,EAEE;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,QAAQ,EAAE,kBAAAC,GAAG;AAAA,aAAID,WAAW,CAACC,GAAD,CAAf;AAAA,KAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGE;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,OAAO,EAAE;AAAA,aAAMF,aAAa,EAAnB;AAAA,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF,EAMGF,SAAS,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAH,GAAuB,IANnC,EAOGC,YAAY,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIA,YAAJ,CAAH,GAA2B,IAP1C,CADU;AAAA,CAAZ;;AAYAF,GAAG,CAACM,SAAJ,GAAgB;AACdH,EAAAA,aAAa,EAAEN,SAAS,CAACU,IAAV,CAAeC,UADhB;AAEdJ,EAAAA,WAAW,EAAEP,SAAS,CAACU,IAAV,CAAeC,UAFd;AAGdP,EAAAA,SAAS,EAAEJ,SAAS,CAACY,IAAV,CAAeD,UAHZ;AAIdN,EAAAA,YAAY,EAAEL,SAAS,CAACa,MAAV,CAAiBF;AAJjB,CAAhB;AAOA,eAAeV,MAAM,CAAC,iBAAe;AAAA,MAAZa,KAAY,SAAZA,KAAY;AAAA,MAC3BC,IAD2B,GACdD,KADc,CAC3BC,IAD2B;AAAA,MACrBC,EADqB,GACdF,KADc,CACrBE,EADqB;AAGnC,SAAO;AACLV,IAAAA,aAAa,EAAES,IAAI,CAACT,aADf;AAELC,IAAAA,WAAW,EAAEQ,IAAI,CAACR,WAFb;AAGLH,IAAAA,SAAS,EAAEY,EAAE,CAACC,OAAH,CAAWb,SAHjB;AAILC,IAAAA,YAAY,EAAEW,EAAE,CAACC,OAAH,CAAWZ;AAJpB,GAAP;AAMD,CAToB,CAAN,CASZH,QAAQ,CAACC,GAAD,CATI,CAAf","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { inject, observer } from 'mobx-react';\n\nconst App = ({ isLoading, errorMessage, verifyAddress, setUserData }) => (\n  <div>\n    <h1>hello MobX</h1>\n    <input type='text' onChange={str => setUserData(str)} />\n    <button type='button' onClick={() => verifyAddress()}>\n      Submit\n    </button>\n    {isLoading ? <p>Loading...</p> : null}\n    {errorMessage ? <p>{errorMessage}</p> : null}\n  </div>\n);\n\nApp.propTypes = {\n  verifyAddress: PropTypes.func.isRequired,\n  setUserData: PropTypes.func.isRequired,\n  isLoading: PropTypes.bool.isRequired,\n  errorMessage: PropTypes.string.isRequired\n};\n\nexport default inject(({ store }) => {\n  const { user, ui } = store;\n\n  return {\n    verifyAddress: user.verifyAddress,\n    setUserData: user.setUserData,\n    isLoading: ui.uiState.isLoading,\n    errorMessage: ui.uiState.errorMessage\n  };\n})(observer(App));\n"]},"metadata":{},"sourceType":"module"}